<?php
/**
 * Community Structure Model
 * method for work with community structure
 * 
 * @version 1.5
 * @todo dependencies for deletion and status deleted
 * 
 * @author Artur Mamedov <arturmamedov1993@gmail.com>
 * @category Structures
 */
class DatabaseObject_Helper
{
    public function __construct()
    {
    }

    /**
     * SELECT from db all types of review of this user,  with SQL UNION
     * 
     * @param type $db
     * @param type $options
     * 
     * @return type
     * /
    static public function GetAllFeedbacks($db, $options = array())
    {
        // initialize the options
        $defaults = array(
            'user_id' => null,
            'status' => 'LIVE',
            'anonym' => null,
            
            'offset' => 0,
            'limit' => 6,
            
            'sum' => true
        );

        foreach($defaults as $k => $v){
            $options[$k] = array_key_exists($k, $options) ? $options[$k] : $v;
        }
        
        $where = array();
        
        if(count($options['user_id']) > 1){
            $where[] = 'user_id IN ('. implode(', ', $options['user_id']) .')';
        } elseif(count($options['user_id']) > 0){
            $where[] = "user_id = '{$options['user_id']}'";
        }
        
        if(count($options['status']) > 1){
            $where[] = 'status IN (\''. implode('\', \'', $options['status']) .'\')';
        } elseif(count($options['status']) > 0){
            $where[] = "status = '{$options['status']}'";
        }
        
        if($options['anonym'] !== null){
            $where[] = "anonym = '{$options['anonym']}'";
        }
        
        $string_where = implode(' AND ', $where);
        
        
        // ALL
        //`status` = 'LIVE' AND `user_id` = {$user->getId()} AND `anonym` = 0
        $query = "
            SELECT id, type, publish_ts FROM `".DB_PREFIX."community_feedback` WHERE {$string_where}
            UNION
            SELECT id, type, publish_ts FROM `".DB_PREFIX."hospice_feedback` WHERE {$string_where}
            UNION
            SELECT id, type, publish_ts FROM `".DB_PREFIX."hospital_feedback` WHERE {$string_where}
            UNION
            SELECT id, type, publish_ts FROM `".DB_PREFIX."kindergarten_feedback` WHERE {$string_where}
            UNION
            SELECT id, type, publish_ts FROM `".DB_PREFIX."medic_feedback` WHERE {$string_where}
            UNION
            SELECT id, type, publish_ts FROM `".DB_PREFIX."rehab_feedback` WHERE {$string_where}                
            ORDER BY publish_ts DESC";

        if($options['offset'] > 0){
            $query .= " LIMIT {$options['offset']}, {$options['limit']}";
        } elseif($options['limit'] > 0) {
            $query .= " LIMIT {$options['limit']}";
        }

        $result = $db->fetchAll($query);

        $community_ids = array();
        $hospice_ids = array();
        $hospital_ids = array();
        $kindergarten_ids = array();
        $medic_ids = array();
        $rehab_ids = array();
        foreach ($result as $item){
            switch($item['type']){
                case'hospital':
                    $hospital_ids[] = $item['id'];
                break;
                case'hospice':
                    $hospice_ids[] = $item['id'];
                break;
                case'kindergarten':
                    $kindergarten_ids[] = $item['id'];
                break;
                case'rehab':
                    $rehab_ids[] = $item['id'];
                break;
                case'community':
                    $community_ids[] = $item['id'];
                break;
                case'medic':
                    $medic_ids[] = $item['id'];
                break;
            }
        }
        
        $options['offset'] = null;
        $options['limit'] = null;
        // community
        if (count($community_ids) > 0){
            $options['id'] = $community_ids;
            $community_feeds = DatabaseObject_CommunityFeedback::GetFeedbacks($db, $options);
        } else {
            $community_feeds = array();
        }
        // hospice
        if (count($hospice_ids) > 0){
            $options['id'] = $hospice_ids;
            $hospice_feeds = DatabaseObject_HospiceFeedback::GetFeedbacks($db, $options);
        } else {
            $hospice_feeds = array();
        }
        // hospital
        if (count($hospital_ids) > 0){
            $options['id'] = $hospital_ids;
            $hospital_feeds = DatabaseObject_HospitalFeedback::GetFeedbacks($db, $options);
        } else {
            $hospital_feeds = array();
        }
        // kindergarten
        if (count($kindergarten_ids) > 0){
            $options['id'] = $kindergarten_ids;
            $kindergarten_feeds = DatabaseObject_KindergartenFeedback::GetFeedbacks($db, $options);
        } else {
            $kindergarten_feeds = array();
        }
        // medic
        if (count($medic_ids) > 0){
            $options['id'] = $medic_ids;
            $medic_feeds = DatabaseObject_MedicFeedback::GetFeedbacks($db, $options);
        } else {
            $medic_feeds = array();
        }
        // rehab
        if (count($rehab_ids) > 0){
            $options['id'] = $rehab_ids;
            $rehab_feeds = DatabaseObject_RehabFeedback::GetFeedbacks($db, $options);
        } else {
            $rehab_feeds = array();
        }

        // the merged array of all type of structure feedback
        $feedbacks = array_merge(
            $community_feeds,
            $hospice_feeds,
            $hospital_feeds,
            $kindergarten_feeds,
            $medic_feeds,
            $rehab_feeds
        );
        
        return $feedbacks;
    }
     */
    
    /**
     * SELECT from db the total count of all types of review with |SQL SUBQUERIES
     * 
     * @param type $db
     * @param type $options
     * 
     * @return integer/array Total sum, array of all types with count for each
     * /
    static public function GetAllFeedbacksCount($db, $options = array())
    {
        // initialize the options
        $defaults = array(
            'user_id' => null,
            'status' => 'LIVE',
            'anonym' => null,
            'sum' => true
        );

        foreach($defaults as $k => $v){
            $options[$k] = array_key_exists($k, $options) ? $options[$k] : $v;
        }
        
        $where = array();
        
        if(count($options['user_id']) > 1){
            $where[] = 'user_id IN ('. implode(', ', $options['user_id']) .')';
        } elseif(count($options['user_id']) > 0){
            $where[] = "user_id = '{$options['user_id']}'";
        }
        
        if(count($options['status']) > 1){
            $where[] = 'status IN (\''. implode('\', \'', $options['status']) .'\')';
        } elseif(count($options['status']) > 0){
            $where[] = "status = '{$options['status']}'";
        }
        
        if($options['anonym'] !== null){
            $where[] = "anonym = '{$options['anonym']}'";
        }
        
        $string_where = implode(' AND ', $where);
        
        
        // ALL
        $query = "SELECT
            (SELECT COUNT(*) FROM ".DB_PREFIX."community_feedback WHERE {$string_where}) as community,
            (SELECT COUNT(*) FROM ".DB_PREFIX."hospital_feedback WHERE {$string_where}) as hospital, 
            (SELECT COUNT(*) FROM ".DB_PREFIX."hospice_feedback WHERE {$string_where}) as hospice,
            (SELECT COUNT(*) FROM ".DB_PREFIX."kindergarten_feedback WHERE {$string_where}) as kindergarten,
            (SELECT COUNT(*) FROM ".DB_PREFIX."medic_feedback WHERE {$string_where}) as medic,
            (SELECT COUNT(*) FROM ".DB_PREFIX."rehab_feedback WHERE {$string_where}) as rehab
            ";
        
        $result = $db->fetchRow($query);
        
        if($options['sum']){
            $sum = array_sum($result);
            return $sum;
        } else {
            return $result;
        }
    }
     */
    
}
